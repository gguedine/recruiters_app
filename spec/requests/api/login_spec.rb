require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/api/login", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # API::Login. As you add validations to API::Login, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    attributes_for(:recruiter)
  }

  let(:invalid_attributes) {
    attributes_for(:recruiter, name: nil)
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # API::LoginsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "POST /login" do
    context "with valid parameters" do
      before do
        create(:recruiter, valid_attributes)
      end

      it "renders a JSON response with the recruiter and token" do
        post api_login_url,
             params: valid_attributes, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.body).to match(a_string_including("token"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the login params" do
        post api_login_url,
             params: invalid_attributes, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.body).to match(a_string_including("Invalid email or password"))
      end
    end
  end

  describe "GET /auto_logn" do
    let(:valid_headers) do
      token = JWT.encode(
{ user_id: Recruiter.last&.id || create(:recruiter,
                                        valid_attributes) }, Rails.application.secret_key_base
)
      { Authorization: "Beared #{token}" }
    end
    let(:recruiter) { create(:recruiter, valid_attributes) }

    it "renders a successful response" do
      recruiter
      get api_auto_login_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end
end
