require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/api/public/jobs", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Job. As you add validations to API::Public::Job, be sure to
  # adjust the attributes here as well.
  let(:recruiter) { create(:recruiter)}
  let(:valid_attributes) {
    attributes_for(:job, recruiter_id: recruiter.id)
  }
  let(:job_a) {create(:job, recruiter_id: recruiter.id, title: "AAA")}
  let(:job_b) {create(:job, recruiter_id: recruiter.id, title: "ABC")}
  let(:job_c) {create(:job, recruiter_id: recruiter.id, title: "CCC")}

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # API::Public::JobsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    let(:response_ids) do
      JSON.parse(response.body).map{|e| e.fetch("id") }
    end
    context "with no filter" do
      it "renders a successful response and return all jobs" do
        job_a
        job_b
        job_c
        get api_public_jobs_url, headers: valid_headers, as: :json
        expect(response).to be_successful
        expect(response_ids).to contain_exactly(
                                               job_a.id,
                                               job_b.id,
                                               job_c.id
        )
      end
    end
    context "with filter" do
      it "renders a successful response and return filtered jobs" do
        job_a
        job_b
        job_c
        get api_public_jobs_url({title: "A"}), headers: valid_headers, as: :json
        expect(response).to be_successful
        expect(response_ids).to contain_exactly(
                                  job_a.id,
                                  job_b.id
                                )
      end
    end

  end

  describe "GET /show" do
    it "renders a successful response" do
      job = Job.create! valid_attributes
      get api_public_job_url(job), as: :json
      expect(response).to be_successful
    end
  end
end
